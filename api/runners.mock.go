// Code generated by MockGen. DO NOT EDIT.
// Source: runners.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	service "github.com/achu-1612/glcm/service"
	gomock "github.com/golang/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// BootUp mocks base method.
func (m *MockRunner) BootUp(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BootUp indicates an expected call of BootUp.
func (mr *MockRunnerMockRecorder) BootUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootUp", reflect.TypeOf((*MockRunner)(nil).BootUp), arg0)
}

// IsRunning mocks base method.
func (m *MockRunner) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockRunnerMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockRunner)(nil).IsRunning))
}

// RegisterService mocks base method.
func (m *MockRunner) RegisterService(arg0 service.Service, arg1 ...service.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockRunnerMockRecorder) RegisterService(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockRunner)(nil).RegisterService), varargs...)
}

// RestartAllServices mocks base method.
func (m *MockRunner) RestartAllServices() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestartAllServices")
}

// RestartAllServices indicates an expected call of RestartAllServices.
func (mr *MockRunnerMockRecorder) RestartAllServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartAllServices", reflect.TypeOf((*MockRunner)(nil).RestartAllServices))
}

// RestartService mocks base method.
func (m *MockRunner) RestartService(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartService indicates an expected call of RestartService.
func (mr *MockRunnerMockRecorder) RestartService(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartService", reflect.TypeOf((*MockRunner)(nil).RestartService), arg0...)
}

// Shutdown mocks base method.
func (m *MockRunner) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRunnerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRunner)(nil).Shutdown))
}

// StopAllServices mocks base method.
func (m *MockRunner) StopAllServices() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopAllServices")
}

// StopAllServices indicates an expected call of StopAllServices.
func (mr *MockRunnerMockRecorder) StopAllServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAllServices", reflect.TypeOf((*MockRunner)(nil).StopAllServices))
}

// StopService mocks base method.
func (m *MockRunner) StopService(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopService indicates an expected call of StopService.
func (mr *MockRunnerMockRecorder) StopService(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockRunner)(nil).StopService), arg0...)
}
