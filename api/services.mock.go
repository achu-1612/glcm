// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
}

// Start mocks base method.
func (m *MockService) Start(arg0 Terminator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), arg0)
}

// Status mocks base method.
func (m *MockService) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockServiceMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockService)(nil).Status))
}

// MockTerminator is a mock of Terminator interface.
type MockTerminator struct {
	ctrl     *gomock.Controller
	recorder *MockTerminatorMockRecorder
}

// MockTerminatorMockRecorder is the mock recorder for MockTerminator.
type MockTerminatorMockRecorder struct {
	mock *MockTerminator
}

// NewMockTerminator creates a new mock instance.
func NewMockTerminator(ctrl *gomock.Controller) *MockTerminator {
	mock := &MockTerminator{ctrl: ctrl}
	mock.recorder = &MockTerminatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerminator) EXPECT() *MockTerminatorMockRecorder {
	return m.recorder
}

// TermCh mocks base method.
func (m *MockTerminator) TermCh() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TermCh")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// TermCh indicates an expected call of TermCh.
func (mr *MockTerminatorMockRecorder) TermCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TermCh", reflect.TypeOf((*MockTerminator)(nil).TermCh))
}
